{\rtf1\ansi\ansicpg1252\cocoartf2639
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 import org.springframework.data.redis.core.ReactiveRedisTemplate;\
import org.springframework.data.redis.core.ReactiveValueOperations;\
import org.springframework.data.redis.serializer.GenericToStringSerializer;\
import reactor.core.publisher.Flux;\
import reactor.core.publisher.Mono;\
\
import java.lang.reflect.Type;\
import java.util.concurrent.TimeUnit;\
\
public class RedisCacheUtil \{\
\
    private final ReactiveRedisTemplate<String, Object> redisTemplate;\
    private final ReactiveValueOperations<String, Object> valueOps;\
\
    public RedisCacheUtil(ReactiveRedisTemplate<String, Object> redisTemplate) \{\
        this.redisTemplate = redisTemplate;\
        this.valueOps = redisTemplate.opsForValue();\
        this.redisTemplate.setValueSerializer(new GenericToStringSerializer<>(Object.class));\
    \}\
\
    public <T> Mono<T> get(String key, Type responseType) \{\
        Class<?> elementType = extractElementType(responseType);\
        return valueOps.get(key)\
                .map(value -> (T) value)\
                .cast(elementType);\
    \}\
\
    public <T> Mono<Boolean> put(String key, T value) \{\
        return valueOps.set(key, value)\
                .map(result -> result && redisTemplate.expire(key, 5, TimeUnit.MINUTES));\
    \}\
\
    public <T> Mono<Boolean> delete(String key) \{\
        return redisTemplate.delete(key);\
    \}\
\
    private Class<?> extractElementType(Type type) \{\
        // Your implementation to extract the element type from the Type object\
        // This can be customized based on your requirements\
    \}\
\
\}\
\
\
\
import org.springframework.data.redis.core.RedisTemplate;\
import org.springframework.data.redis.core.ValueOperations;\
import org.springframework.data.redis.serializer.GenericToStringSerializer;\
\
import java.lang.reflect.Type;\
import java.util.concurrent.TimeUnit;\
\
public class RedisCacheUtil \{\
\
    private final RedisTemplate<String, Object> redisTemplate;\
    private final ValueOperations<String, Object> valueOps;\
\
    public RedisCacheUtil(RedisTemplate<String, Object> redisTemplate) \{\
        this.redisTemplate = redisTemplate;\
        this.valueOps = redisTemplate.opsForValue();\
        this.redisTemplate.setValueSerializer(new GenericToStringSerializer<>(Object.class));\
    \}\
\
    public <T> T get(String key, Type responseType) \{\
        Class<?> elementType = extractElementType(responseType);\
        return (T) valueOps.get(key);\
    \}\
\
    public <T> void put(String key, T value) \{\
        valueOps.set(key, value);\
        redisTemplate.expire(key, 5, TimeUnit.MINUTES);\
    \}\
\
    public void delete(String key) \{\
        redisTemplate.delete(key);\
    \}\
\
    private Class<?> extractElementType(Type type) \{\
        // Your implementation to extract the element type from the Type object\
        // This can be customized based on your requirements\
    \}\
\
\}\
\
\
\
import java.lang.reflect.ParameterizedType;\
import java.lang.reflect.Type;\
\
private Class<?> extractElementType(Type type) \{\
    if (type instanceof ParameterizedType) \{\
        ParameterizedType parameterizedType = (ParameterizedType) type;\
        Type[] actualTypeArguments = parameterizedType.getActualTypeArguments();\
\
        if (actualTypeArguments.length > 0) \{\
            Type argumentType = actualTypeArguments[0];\
            if (argumentType instanceof ParameterizedType) \{\
                return (Class<?>) ((ParameterizedType) argumentType).getRawType();\
            \} else if (argumentType instanceof Class<?>) \{\
                return (Class<?>) argumentType;\
            \}\
        \}\
    \} else if (type instanceof Class<?>) \{\
        return (Class<?>) type;\
    \}\
\
    throw new IllegalArgumentException("Cannot extract element type from: " + type);\
\}\
}